# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChatMessage {
  sender: String!
  content: String!
}

input ChatMessageInput {
  message: String!
  room: String!
}

input CreateMatchInput {
  side: String
  rated: Boolean = false
  opponent: String
  timeControl: Float = 20
  increment: Float = 0
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  passwordRepeat: String!
}

type Friend {
  user: User!
  friend: User!
  status: Relationship!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  user: User!
  token: String!
}

type Match {
  id: ID!
  type: MatchType!
  realtime: Boolean!
  turn: String!
  fen: String!
  pgn: String!
  rated: Boolean!
  gameOver: Boolean!
  draw: Boolean!
  checkmate: Boolean!
  stalemate: Boolean!
  threefold: Boolean!
  timedout: Boolean!
  forfeit: Boolean!
  timeControl: Float!
  increment: Float!
  participants: [MatchParticipant!]
  self: MatchParticipant
  opponent: MatchParticipant
  createdDate: String!
  updatedDate: String!
}

type MatchInvite {
  id: String!
  creator: User!
  invited: User
  createdDate: String!
}

type MatchInviteSubData {
  invite: MatchInvite!
  deleted: Boolean
}

type MatchmakingResponse {
  matchId: String!
  userIds: [String!]!
}

input MatchMoveInput {
  id: String!
  from: String!
  to: String!
  promotion: String!
}

type MatchParticipant {
  user: User!
  eloChange: Float!
  winner: Boolean!
  side: String!
  pendingTimeoutDate: Float!
  time: Float!
}

enum MatchType {
  CLASSICAL
  RAPID
  BLITZ
  BULLET
}

type Mutation {
  login(input: LoginInput!): LoginResponse!
  createUser(input: CreateUserInput!): LoginResponse!
  createMatch(input: CreateMatchInput!): Match!
  joinMatch(id: String!): Match!
  forfeit(matchId: String!): Match!
  matchMove(input: MatchMoveInput!): Match!
  createMatchInvite: MatchInvite!
  deleteMyInvite: MatchInvite!
  sendChatMessage(input: ChatMessageInput!): ChatMessage!
  friendRequest(recipient: String!): Friend!
  addToMatchmaking: String!
  removeFromMatchmaking: String!
}

type Notification {
  id: ID!
  read: Boolean!
  type: NotificationType!
  data: JSON
}

enum NotificationType {
  OTHER
  MATCH_ENDED
}

type Query {
  userById(id: String!): User!
  userByEmail(email: String!): User!
  me: User!
  matchById(id: String!): Match!
  cleanup: Boolean!
  myMatches: [Match!]!
  myOngoingMatches: [Match!]!
  myFinishedMatches: [Match!]!
  finishedMatches(id: String!): [Match!]!
  matchInviteFromId(id: String!): MatchInvite!
  matchInvites: [MatchInvite!]!
  myFriends: [Friend!]!
  myNotifications: [Notification!]!
}

enum Relationship {
  PENDING
  MUTUAL
  BLOCKED
}

type Subscription {
  matchMoveMade(id: String!): Match!
  matchInvite: MatchInviteSubData!
  chatMessage(room: String!): ChatMessage!
  matchmake(userId: String!): MatchmakingResponse!
  notification(userId: String!): Notification!
}

type User {
  id: ID!
  username: String!
  exp: Float!
  classicalElo: Float!
  rapidElo: Float!
  blitzElo: Float!
  bulletElo: Float!
}
